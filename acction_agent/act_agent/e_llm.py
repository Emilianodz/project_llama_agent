import openai
import json
import os
from typing import Dict, Any
from .utils import sent_auth_user, get_id_by_email, get_data_sim_used, reset_sim, plan_service_info, increment_data_plan, get_info_by_iccid, get_info_by_id
from .services.dynamo import update_auth_status, check_authentication
from .mini_m import initialize_system, get_answer


# Key de OpenAI
openai.api_key = os.getenv('OPENAI_API_KEY')

class LLM:
    def __init__(self, conversation_id: str):
        self.conversation_id = self.conversation_id = f'{conversation_id}'
        print(f"Archivo de la conversación: {self.conversation_id}")
        self.autogenerated_model_info = {
            "companyClientId": None,
            "iccid": None,
            "simId": None,
            "annexId": None,
            "planId": None,
            "planName": None,
            "supplierId": None,
            "idSupplierPlan": None,
            "mb": None,
            "sku": None,
            "serviceTime": None,
            "userId": None
        }
        self.authenticated = False
    
    def process_message(self, context, user_message: str) -> Any:
        
        try:
            # Inicializar el sistema FAISS y el modelo de lenguaje solo una vez
            if not hasattr(self, 'knowledge_base') or not hasattr(self, 'chain'):
                self.knowledge_base, self.chain = initialize_system()  # Usa la función inicializada previamente
            
            #print(self.conversation_id)
            response = openai.chat.completions.create(
                model="gpt-4-turbo-2024-04-09",
                messages=[
                   {"role": "system", "content": (
                        "Eres un asistente de soporte técnico con capacidad de llamado de funciones. "
                        "Evita saludar repetidamente en las respuestas. "
                        "Verifica la autenticación una vez, no pidas repetidamente la autenticación. "
                        "Usa las funciones disponibles para resolver la solicitud sin esperar la guía absoluta del usuario. "
                        "Si la solicitud está relacionada con aumentar un plan de datos, verifica si se han proporcionado el número de usuario y el correo electrónico. "
                        "Si no se han proporcionado, solicita al usuario estos datos antes de proceder con la operación. "
                        "Para aumentar el plan de datos, usa las siguientes funciones en orden: "
                        "1) Usa la función get_info_by_iccid para obtener el idsim. "
                        "2) Usa la función plan_service_info para obtener los datos necesarios para enviar a increment_plan. "
                        "3) Usa increment_plan para cambiar el plan y obtener los datos del nuevo plan. "
                        "El token que necesitas para las funciones es el mismo que para las demás solicitudes. "
                    )},
                    {"role": "user", "content": context},
                    {"role": "user", "content": user_message}
                ],
                functions=self._get_functions(),
                function_call="auto",
            )
            message = response.choices[0].message
            function_call = message.function_call
            
            if function_call:
                print(f"Intención detectada: {function_call.name}")
            
            else:
                print(f"Respuesta del modelo sin función: {message.content}")
            
            if function_call and function_call.name == "sent_auth_user":
                if self.authenticated:
                    return "Ya estás autenticado. ¿En qué más puedo ayudarte?"
                
                else:
                    result = self._handle_function_call(function_call)

                    # Marcar como autenticado si la autenticación fue exitosa
                    if "access_token" in result:
                        self.authenticated = True   

                    simple_message = "Usuario verificado"                   
                    function_message = self.process_message(user_message=context, context= "Ya se autentico el usuario")
                    art_message = (simple_message, function_message)
                    return art_message  
                
            if function_call:
                result = self._handle_function_call(function_call)
                print(f"Información resultado a procesar: {result}")
                return self._generate_response(result)
            else:
                result = get_answer(user_message, self.knowledge_base, self.chain)
                return result


        except Exception as e:
            print("Error:", e)
            return "Lo siento, hubo un error al procesar tu solicitud. Por favor, inténtalo de nuevo."
   
    def _handle_function_call(self, function_call: Dict[str, Any]) -> str:
        function_name = function_call.name
        arguments = json.loads(function_call.arguments)
        email = arguments.get('email')
        iccid = arguments.get('iccid')
               
        if function_name == "incremento_plan_de_datos":
            print(f"llamando a la funcion {function_name}")
            # verificar si ya se autentico el usuario
            try:
                # Obtener el ID del usuario usando su email
                if not self.autogenerated_model_info['companyClientId']:
                    print("obteniendo ID del usuario...")
                    print(f"Email: {email}")
                    user_info = get_id_by_email(email)
                    print(user_info)
                    self.autogenerated_model_info['companyClientId'] = user_info['companyClientId']
                    print(self.autogenerated_model_info['companyClientId'])
                    self.autogenerated_model_info['userId'] = user_info['id']
                    print(self.autogenerated_model_info['userId'])
                    print(f"User info obtained: {user_info}")
                
                # Obtener información de la SIM usando el ICCID
                if not self.autogenerated_model_info['simId']:
                    print("obteniendo SIM...")
                    sim_info = get_info_by_iccid(iccid, self.autogenerated_model_info['companyClientId'])
                    self.autogenerated_model_info['simId'] = sim_info['id']
                    print(self.autogenerated_model_info['simId'])
                    print(f"SIM info obtained: {sim_info}")
                
                # Obtener información del plan de datos
                if not self.autogenerated_model_info['planId']:
                    print("obteniendo plan de datos...")
                    plan_info_response = plan_service_info(self.autogenerated_model_info['simId'])
                    print(f"Respuesta completa de plan_service_info: {plan_info_response}")
                    
                    # Extraer los datos de la clave 'data'
                    plan_info = plan_info_response.get('data', {})
                    
                    # Usar un método más seguro para acceder a los datos
                    self.autogenerated_model_info['annexId'] = plan_info.get('annexId')
                    self.autogenerated_model_info['planId'] = plan_info.get('planId')
                    self.autogenerated_model_info['planName'] = plan_info.get('planName')
                    self.autogenerated_model_info['supplierId'] = plan_info.get('supplierId')
                    self.autogenerated_model_info['idSupplierPlan'] = plan_info.get('idSupplierPlan')
                    self.autogenerated_model_info['sku'] = plan_info.get('sku')
                    self.autogenerated_model_info['serviceTime'] = plan_info.get('serviceTime')
                    self.autogenerated_model_info['mb'] = plan_info.get('mb')
                    
                    print("Valores extraídos del plan_info:")
                    for key, value in self.autogenerated_model_info.items():
                        print(f"{key}: {value}")
                
                if all(self.autogenerated_model_info[key] is not None for key in [
                    'simId', 'annexId', 'planId', 'planName', 'supplierId', 'idSupplierPlan',
                    'mb', 'sku', 'serviceTime', 'userId'
                ]):
                    print("Incrementando plan de datos...")
                    resultado = increment_data_plan(
                        int(self.autogenerated_model_info['simId']),
                        int(self.autogenerated_model_info['annexId']),
                        int(self.autogenerated_model_info['planId']),
                        str(self.autogenerated_model_info['planName']),
                        int(self.autogenerated_model_info['supplierId']),
                        int(self.autogenerated_model_info['idSupplierPlan']),
                        int(self.autogenerated_model_info['mb']),
                        str(self.autogenerated_model_info['sku']),
                        int(self.autogenerated_model_info['serviceTime']),
                        int(self.autogenerated_model_info['userId'])
                    )
                    
                    print(f"Resultado del aumento de plan: {resultado}")
                    return resultado
                else:
                    return "No se pudo incrementar el plan de datos. Faltan datos necesarios."
            
            except Exception as e:
                print(f"Error al intentar aumentar el plan de datos: {e}")
                return "Error al intentar aumentar el plan de datos."
     
        return f"Función {function_name} no implementada"
    
    
    def _generate_response(self, result: Any) -> str:
        # Generar una respuesta basada en el resultado de la función
        response = openai.chat.completions.create(
            model="gpt-4-turbo-2024-04-09",
            messages=[
                {"role": "system", "content": (
                    "Eres un asistente de soporte técnico con capacidad de llamado de funciones. "
                    "Evita saludar repetidamente en las respuestas y verifica la autenticación solo una vez. "
                    "Usa las funciones disponibles para resolver la solicitud sin esperar la guía absoluta del usuario."
                )},
                {"role": "system", "content": (
                    "Si la solicitud está relacionada con resetear o reiniciar una SIM, utiliza la función correspondiente. "
                    "Si la solicitud está relacionada con conocer el consumo mensual de datos, usa la función get_data_sim_used para obtener la información. "
                    "Para aumentar un plan de datos, no es necesario pedir la cantidad de MB a aumentar, simplemente usa la función increment_plan "
                    "con la información obtenida de plan_service_info."
                )},
                {"role": "function", "name": "function_result", "content": str(result)},
            ],
        )
        return response.choices[0].message.content
    

    @staticmethod
    def _get_functions():
        return [
            {
                "name": "incremento_plan_de_datos",
                "description": "Incrementar o aumentar el plan de datos de una SIM. Se requieren el correo electrónico del usuario y el ICCID de la SIM. Los demás datos se obtienen automáticamente.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "email": {"type": "string", "description": "El correo electrónico del usuario."},
                        "iccid": {"type": "string", "description": "El ICCID de la SIM para identificarla."}
                    },
                    "required": ["email", "iccid"]
                }
            }
        ]